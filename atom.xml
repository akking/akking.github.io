<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dongyan Li&#39;s Notebook</title>
  <subtitle>Curiosity Driven, Life Long</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-08T16:24:41.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Dongyan Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ReconstructEulerianPath</title>
    <link href="http://yoursite.com/2017/03/08/ReconstructEulerianPath/"/>
    <id>http://yoursite.com/2017/03/08/ReconstructEulerianPath/</id>
    <published>2017-03-08T16:24:41.000Z</published>
    <updated>2017-03-08T16:24:41.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Building a Hadoop cluser using Raspberry Pi</title>
    <link href="http://yoursite.com/2017/02/24/buildRpiHadoopCluster/"/>
    <id>http://yoursite.com/2017/02/24/buildRpiHadoopCluster/</id>
    <published>2017-02-24T18:01:56.000Z</published>
    <updated>2017-02-24T18:15:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Why-build-this-cluster"><a href="#Why-build-this-cluster" class="headerlink" title="Why build this cluster?"></a>Why build this cluster?</h1><h2 id="Good-part"><a href="#Good-part" class="headerlink" title="Good part:"></a>Good part:</h2><ul>
<li>Raspberry Pi runs the same Linux and Hadoop as Amazon EC2 does. Good for learning and testing.</li>
<li>Cheap, less than $200 for the whole system. 40w power consumption, always on 24x7.</li>
<li>Under same network, no server down, command response has zero lag.</li>
<li>Versatile, could be multi-machine web server or own cloud.</li>
<li>Sits on the desk, actually own the server, feels good.</li>
</ul>
<h2 id="But"><a href="#But" class="headerlink" title="But:"></a>But:</h2><ul>
<li>ARM architecture at low clock speed, slow. Not suited for any big-size dataset.</li>
<li>However, you can test a little portion of large datasets before shipping to the AWS.</li>
</ul>
<h1 id="Cluster-Physical-Setup"><a href="#Cluster-Physical-Setup" class="headerlink" title="Cluster Physical Setup"></a>Cluster Physical Setup</h1><h2 id="Cluster-Specs"><a href="#Cluster-Specs" class="headerlink" title="Cluster Specs"></a>Cluster Specs</h2><ul>
<li>4 x Raspberry Pi 3 with 64 GB SD card</li>
<li>Gigabit Ethernet Switch for Inter-Nodes talk</li>
<li>Cables and Power</li>
</ul>
<h2 id="Assembly"><a href="#Assembly" class="headerlink" title="Assembly"></a>Assembly</h2><ul>
<li>In order to “stack” the parts together, I ordered a stacking kit which can be stacked together with Raspberry Pi. </li>
<li>For power supply, I used a 40W 5-Port USB charger with a max output of 2.4A for each port.<br>Official recommend using a 2.5Amp power supply for each of the Raspberry Pi 3 but I highly doubt they can use that much power. </li>
<li>Since Raspberry Pi 3 has a build-in WIFI adapter, it’s not necessary to use any wired connections in order<br>to let cluster work. However, for the sake of stability and adaptability, I used a Gigabit Ethernet Switch for inter-nodes communication.<br>Whenever you need to bring the cluster to somewhere else, you only need to connect the master node to the Internet by wire or WIFI.</li>
<li>The picture of fully assembled cluster: (in the next page due to PDF output)</li>
</ul>
<p><img src="/images/assembledCluster.png" alt="assembled cluster"></p>
<h1 id="Cluster-Software-Setup"><a href="#Cluster-Software-Setup" class="headerlink" title="Cluster Software Setup"></a>Cluster Software Setup</h1><h2 id="Install-Linux-Image"><a href="#Install-Linux-Image" class="headerlink" title="Install Linux Image"></a>Install Linux Image</h2><p>For Linux distribution, I used <a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="external">RASPBIAN</a> which is official supported operating system. I used <code>RASPBIAN JESSIE LITE</code> which contains no GUI and has only <code>292 MB</code>. </p>
<p>In order to avoid some <em>stupid mistaks</em> which need several hours to find out, I install the Linux System and Hadoop only into <strong>one</strong> machine,<br>configure and test the Hadoop to check if everything is OK and then<br>dump the whole SD card image to other three of them.</p>
<p>Installation:</p>
<ol>
<li>Insert the SD card to my MacBook</li>
<li><code>diskutil list</code> to list the mounted driver</li>
<li><p>unmount the SD card for writing the image:</p>
<p>   diskutil unmountDisk /dev/disk<disk# from="" diskutil=""></disk#></p>
<p>in my case is <code>disk3</code></p>
</li>
<li><p>write the image to SD card: </p>
<p>   sudo dd bs=1m if=image.img of=/dev/rdisk<disk# from="" diskutil=""></disk#></p>
<p>and in my case:</p>
<pre><code>sudo dd bs=1m if=/Users/DLI/Downloads/2016-05-27-raspbian-jessie-lite.img of=/dev/rdisk3`
</code></pre></li>
</ol>
<h2 id="OS-setup-and-Hadoop-Compilation"><a href="#OS-setup-and-Hadoop-Compilation" class="headerlink" title="OS setup and Hadoop Compilation"></a>OS setup and Hadoop Compilation</h2><h3 id="Connect-to-RPi"><a href="#Connect-to-RPi" class="headerlink" title="Connect to RPi:"></a>Connect to RPi:</h3><ul>
<li>Insert SD card into one the RPi and connect that RPi to my home router. For clarity, I will name this RPi <strong>masterPi</strong>.</li>
<li>Then, log into my router to find the IP address of <strong>masterPi</strong>,<br>which is <code>192.168.1.125</code>. Then, manually assign an IP address to masterPi<br>so I don’t need to check the address of that masterPi after rebooting.</li>
<li><p>log into the <code>masterPi</code>:</p>
<p>  SSH pi@192.168.1.125</p>
<p>with a pre-set password: <code>raspberry</code></p>
</li>
<li><p>expand the file system and configure the locale setting with <code>sudo raspi-config</code></p>
</li>
<li><p>do a</p>
<p>  sudo apt-get update &amp;&amp; sudo apt-get upgrade</p>
<p>to keep the system fresh</p>
</li>
<li><p>add a new user <code>HadoopUser</code> into a <strong>sudo</strong> group <code>hadoop</code>:</p>
<pre><code>sudo addgroup hadoop
sudo adduser --ingroup hadoop HadoopUser
</code></pre><p>shell give me a warning: <code>adduser: Please enter a username matching the regular expression configured</code><br>after some research it seems that Linux doesn’t recommend mixing upper and lower case name,<br>so I used </p>
<pre><code>sudo adduser --ingroup hadoop hadoopuser
</code></pre><p>instead (Lession learnt…), then add <code>hadoopuser to sudo group</code></p>
<pre><code>sudo adduser hadoopuser sudo
</code></pre></li>
</ul>
<h3 id="Install-JDK"><a href="#Install-JDK" class="headerlink" title="Install JDK"></a>Install JDK</h3><ul>
<li>it is reported that the Oracle JDK has better performance over <code>Open JDK</code>, so: <code>sudo apt-get install oracle-java8-jdk</code><br>note: JDK is installed on <code>/usr/lib/jvm/</code></li>
<li><p>check if</p>
<p>  java -version</p>
<p>points to Oracle JDK</p>
</li>
</ul>
<h3 id="Download-source-code"><a href="#Download-source-code" class="headerlink" title="Download source code"></a>Download source code</h3><p>From <a href="http://www-us.apache.org/dist/hadoop/common/hadoop-2.7.2/hadoop-2.7.2-src.tar.gz" target="_blank" rel="external"><code>hadoop-2.7.2</code></a></p>
<h3 id="Compile"><a href="#Compile" class="headerlink" title="Compile"></a>Compile</h3><p>A quick look at the <a href="https://svn.apache.org/repos/asf/hadoop/common/branches/MR-4327/BUILDING.txt" target="_blank" rel="external"><code>Building Instruction</code></a> of Hadoop from Apache, Hadoop has the following requirements:</p>
<ul>
<li>Unix System</li>
<li>JDK 1.6</li>
<li>Maven 3.0</li>
<li>Forrest 0.8 (if generating docs)</li>
<li>Findbugs 1.3.9 (if running findbugs)</li>
<li>ProtocolBuffer 2.4.1+ (for MapReduce and HDFS)</li>
<li>CMake 2.6 or newer (if compiling native code)</li>
<li>Internet connection for first build (to fetch all Maven and Hadoop dependencies)</li>
</ul>
<p>Addition to JDK, I need at least Maven,ProtocolBuffer and CMake so install them accordingly:</p>
<ul>
<li><code>apt-get install maven</code>, a lot of dependencies but <code>apt-get</code> covered me nicely :)</li>
<li>installing ProtocolBuffer is a little tricky</li>
<li>we must download the <a href="https://github.com/google/protobuf/blob/master/src/README.md" target="_blank" rel="external">source</a>, then <code>./autogen.sh</code>, as specified in the offical site</li>
<li><p>by default, ProtocolBuffer install the file to <code>/usr/local</code> which may not be found by the system, so reconfig it to <code>/usr</code>:</p>
<pre><code>./configure --prefix=/usr
</code></pre><p>and then </p>
<pre><code>make
</code></pre></li>
<li><p><code>make check</code> to check if builds OK and returns:</p>
<pre><code>=====================================================
Testsuite summary for Protocol Buffers 3.0.0-beta-3
=====================================================
# TOTAL: 6
# PASS:  6
# SKIP:  0
# XFAIL: 0
# FAIL:  0
# XPASS: 0
# ERROR: 0
=====================================================
</code></pre></li>
<li><p>download the <a href="http://www-us.apache.org/dist/hadoop/common/hadoop-2.7.2/hadoop-2.7.2-src.tar.gz" target="_blank" rel="external"><code>hadoop-2.7.2</code></a> source code unzip with</p>
<p>  tar xzvf hadoop-2.7.2-src.tar.gz</p>
</li>
<li><p>compile the Hadoop natively for RPi</p>
<p>  cd hadoop-2.7.2-src/<br>  sudo mvn package -Pdist,native -DskipTests -Dtar</p>
</li>
<li><p>However, I get the error message in the mid of compiling process:</p>
<blockquote>
<p>[ERROR] Failed to execute goal org.apache.hadoop:hadoop-maven-plugins:2.7.2:protoc (compile-protoc) on project hadoop-common: org.apache.maven.plugin.MojoExecutionException: ‘protoc –version’ did not return a version -&gt; [Help 1].</p>
</blockquote>
<p>  After some search online, building Hadoop need version of <code>protocol buffers</code> exactly be <code>2.5</code>. So I need to delete the one I installed and rebuild Hadoop.</p>
</li>
<li>Another 45 minutes of life, I finally get <code>protocol buffers version 2.5</code> compiled.</li>
<li><p>Again: </p>
<p>  sudo mvn package -Pdist,native -DskipTests -Dtar</p>
</li>
<li><p>Finally:</p>
<p>  [INFO] ————————————————————————<br>  [INFO] BUILD SUCCESS<br>  [INFO] ————————————————————————<br>  [INFO] Total time: 53:22.700s<br>  [INFO] Finished at: Thu Jun 09 23:08:57 CDT 2016<br>  [INFO] Final Memory: 81M/224M<br>  [INFO] ————————————————————————</p>
</li>
</ul>
<p>Test the build:</p>
<pre><code>bin/hadoop checknative -a
</code></pre><p>And the output: </p>
<pre><code>Native library checking:
hadoop:  true /home/hadoopuser/hadoop-2.7.2-src/hadoop-dist/target/hadoop-2.7.2/lib/native/libhadoop.so.1.0.0
zlib:    true /lib/arm-linux-gnueabihf/libz.so.1
snappy:  true /usr/lib/libsnappy.so.1
lz4:     true revision:99
bzip2:   true /lib/arm-linux-gnueabihf/libbz2.so.1
openssl: true /usr/lib/arm-linux-gnueabihf/libcrypto.so
</code></pre><p>Test with</p>
<pre><code>$ bin/hdfs dfs -put etc/hadoop input
$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar grep input output &apos;dfs[a-z.]+&apos;
</code></pre><p>View the output with</p>
<pre><code>$ bin/hdfs dfs -cat output/*
</code></pre><p>Output:</p>
<pre><code>6       dfs.audit.logger
4       dfs.class
3       dfs.server.namenode.
2       dfs.period
2       dfs.audit.log.maxfilesize
2       dfs.audit.log.maxbackupindex
1       dfsmetrics.log
1       dfsadmin
1       dfs.servers
1       dfs.replication
1       dfs.file
</code></pre><p>Everything seems OK, moving to next step:</p>
<h2 id="Clone-image-to-other-RPi"><a href="#Clone-image-to-other-RPi" class="headerlink" title="Clone image to other RPi"></a>Clone image to other RPi</h2><p>Insert the SD card from Pi to my laptop, and then</p>
<pre><code>$ sudo dd if=/dev/sdb of=node1.img
$ sudo dd if=node1.img of=/dev/sdb
</code></pre><p>Do it 3 times to clone the image to other three slave nodes.</p>
<h1 id="Pseudo-distributed-mode-test"><a href="#Pseudo-distributed-mode-test" class="headerlink" title="Pseudo-distributed mode test"></a>Pseudo-distributed mode test</h1><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>In <code>core-site.xml</code></p>
<pre><code>configuration&gt;
    &lt;property&gt;
        &lt;name&gt;fs.defaultFS&lt;/name&gt;
        &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;
    &lt;/property&gt;
&lt;/configuration&gt;
</code></pre><p>And for <code>etc/hadoop/hdfs-site.xml</code>:</p>
<pre><code>&lt;configuration&gt;
    &lt;property&gt;
        &lt;name&gt;dfs.replication&lt;/name&gt;
        &lt;value&gt;1&lt;/value&gt;
    &lt;/property&gt;
&lt;/configuration&gt;
</code></pre><p>Then, formate the namenode:</p>
<pre><code>$ bin/hdfs namenode -format
</code></pre><p>Start the DataNode:</p>
<pre><code>$ sbin/start-dfs.sh
</code></pre><p>And <code>jps</code> shows:</p>
<pre><code>2608 DataNode
2774 SecondaryNameNode
2520 NameNode
2968 Jps
</code></pre><h2 id="wordcount-test"><a href="#wordcount-test" class="headerlink" title="wordcount test"></a>wordcount test</h2><p>Download the <code>bioproject.xml</code> from HW1:</p>
<pre><code>wget http://rasinsrv07.cstcis.cti.depaul.edu/CSC555/bioproject.xml
</code></pre><p>put into HDFS:</p>
<pre><code>$ bin/hdfs dfs -put bioproject.xml bioproject
</code></pre><p>run wordcount:<br>​<br>    root@masterPi:~/hadoop-2.7.2# time bin/hadoop jar<br>    .. share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar<br>    .. wordcount bioproject bioprojectOutput2</p>
<p>time report:</p>
<pre><code>real    8m39.367s
user    8m51.510s
sys     0m15.360s
</code></pre><p>not bad compared to Amazon EC2’s single-node cluster with 1m30s.</p>
<h1 id="Two-Three-Four-nodes-comparison"><a href="#Two-Three-Four-nodes-comparison" class="headerlink" title="Two, Three, Four nodes comparison"></a>Two, Three, Four nodes comparison</h1><h2 id="two-node-cluster"><a href="#two-node-cluster" class="headerlink" title="two-node cluster"></a>two-node cluster</h2><h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><p>hdfs-site.xml: I lower the block size because of the test sample file size</p>
<pre><code>&lt;configuration&gt;
    &lt;property&gt;
    &lt;name&gt;dfs.replication&lt;/name&gt;
    &lt;value&gt;2&lt;/value&gt;
&lt;/property&gt;
    &lt;property&gt;
        &lt;name&gt;dfs.blocksize&lt;/name&gt;
        &lt;value&gt;32m&lt;/value&gt;
        &lt;description&gt;Block size&lt;/description&gt;
    &lt;/property&gt;
&lt;/configuration&gt;
</code></pre><p>and yarn-site.xml:<br>​<br>    <configuration><br>    <property><br>          <name>yarn.resourcemanager.resource-tracker.address</name><br>          <value>master:8025</value><br>    </property><br>    <property><br>          <name>yarn.resourcemanager.scheduler.address</name><br>          <value>master:8030</value><br>    <property><br>    </property><br>          <name>yarn.resourcemanager.address</name><br>          <value>master:8050</value><br>    </property><br>    </configuration></p>
<p>then:</p>
<pre><code>bin/hdfs namenode -format
</code></pre><p>and:</p>
<pre><code>sbin/start-all.sh
</code></pre><p> Check on the 50070 port:</p>
<pre><code>Node    Last contact    Admin State Capacity          Used    Non DFS Used    Remaining        Blocks 
masterPi:50010 (192.168.3.1:50010)  1   In Service  58.61 GB    222.19 MB   9.91 GB     48.48 GB    7 
slavePi1:50010 (192.168.3.2:50010)  1   In Service  58.58 GB    222.19 MB   10.44 GB    47.92 GB    7 
</code></pre><p>each of the nodes was allocated 7 blocks.<br>to start everything and try wordcount on <code>bioproject.xml</code> again.</p>
<pre><code>time bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar 
wordcount bioproject bioprojectOutput1
</code></pre><p>the result:</p>
<pre><code>real    8m55.691s
user    8m43.950s
sys     0m15.560s
</code></pre><p>is not better than the single-node cluster, why? Maybe I changed the blcok size, change it back and re-run the task: now each node has only <code>2</code> blocks<br>result:</p>
<pre><code>real    8m35.001s
user    7m73.950s
sys     0m15.560s
</code></pre><p>Still the same, why? After some careful observation of the mapreduce job, I see a lot of map -&gt; map jobs which is unrelated to the<br>mapreduce process. After searching the web, I think the problem is I’m <strong>still</strong> using the normal <code>hadoop jar ...</code> command which is not<br>replace by the <code>YARN</code> command that new to the 2.x version of Hadoop.</p>
<p><img src="/images/yarn.png" alt=""></p>
<p>After spending more time doing research on <code>YARN</code>, which is replacing the old <code>ResourceManager</code> by giving authorities to slave node for allocating containers(job runner), monitoring their resource usage.<br>I find <code>YARN</code> is a great idea since central administration is become harder and harder as the Hadoop ecosystem getting larger. With YARN and MapReduce 2, there are no longer pre-configured static slots for Map and Reduce tasks. The entire cluster is available for dynamic resource allocation of Maps and Reduces as needed by the job. So, I decided to use YARN as task manager instead of Hadoop generic mapreduce. However, after get <code>YARN</code> up and running, I keep getting:</p>
<pre><code>Container killed on request. Exit code is 137
Container exited with a non-zero exit code 137
</code></pre><p>which is the famous OOM error that the tasks is kill by the system because of not enough memory…</p>
<p>Of course I will get this error message, RPi only has 1g of RAM but YARN will allocate 1024mb of memory minimun for each container and for each node will has multiple containers for the tasks.<br>So, we must change some parameters:</p>
<p>I added the following in the yarn-set.xml:</p>
<pre><code>&lt;property&gt;
&lt;name&gt;yarn.nodemanager.resource.memory-mb&lt;/name&gt;name&gt;
&lt;value&gt;500&lt;/value&gt;
&lt;/property&gt;
</code></pre><p>Then, run with command:</p>
<pre><code>bin/yarn jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar 
wordcount /bioproject /bioprojectop1
</code></pre><p>However, I still get </p>
<pre><code>Diagnostics: Container is running beyond virtual memory limits. 
Current usage: 15.1 MB of 256 MB physical memory used; 1.1 GB of 537.6 MB virtual memory used. Killing container.
</code></pre><p>and containers were shutdown by the system,<br>Run <code>top</code> shows:</p>
<pre><code>4301 root      20   0  305860 150512   5808 S  70.2 15.1   0:24.66 java
4556 root      20   0  284684  36320  15324 S  62.6  3.6   0:04.16 java
4228 root      20   0  306728 151200   6364 S  61.0 15.2   0:28.99 java
4584 root      20   0  283660  35136  15232 S  60.6  3.5   0:03.36 java
4538 root      20   0  284684  36084  15156 S  59.0  3.6   0:04.15 java
4321 root      20   0  305704 151508   7268 S  56.7 15.2   0:21.70 java
3140 root      20   0  512012  77436   6784 S  17.5  7.8   1:09.14 java
</code></pre><p>YARN seems give too many works to a single node…</p>
<p>After another servaral hours of configuration, I can’t set parameters properly to let yarn task run successfully. I decided to move on to the next topic and leave this for later to solve.<br>remove the parameters:</p>
<pre><code>&lt;property&gt;
    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;
    &lt;value&gt;yarn&lt;/value&gt;
&lt;/property&gt;
</code></pre><p>in order to bypass the <code>YARN</code> framework and run the Mapreduce tasks directly on HDFS.</p>
<h1 id="Various-tasks-on-fully-distributed-mode"><a href="#Various-tasks-on-fully-distributed-mode" class="headerlink" title="Various tasks on fully distributed mode"></a>Various tasks on fully distributed mode</h1><p>Add other three nodes to the cluser is just add more names into the <code>slaves</code> file and everything runs smoothly.</p>
<h2 id="wordcount-on-bioproject"><a href="#wordcount-on-bioproject" class="headerlink" title="wordcount on bioproject"></a>wordcount on bioproject</h2><p>In full-cluster mode, the wordcount job on <code>bioproject</code> give us</p>
<pre><code>real    6m65.001s
user    7m33.050s
sys     0m18.560s
</code></pre><p>A about 20% decrease in time, not a big increase in performance at all. Run <code>top</code> give us some hint of reason why:</p>
<p><img src="/images/2.png" alt="s1"></p>
<p>The I/O performance of RPi is so low that CPU is idle waiting for input from the SD card. Moreover, the <code>wordcount</code> is not an CPU but IO intensive task, so the increase in cluster size doesn’t provide too much benefit for RPi.</p>
<h1 id="The-bottleneck-and-improvements"><a href="#The-bottleneck-and-improvements" class="headerlink" title="The bottleneck and improvements"></a>The bottleneck and improvements</h1><p>From the result of <code>wordcount</code> on <code>bioproject.xml</code>, we know the bottleneck is from disk IO. In order to optimize it,<br>we can lower the block size since SD card is not like traditional hardrive which has to spin the disk to read the data.</p>
<p>Also, as indicated by my unsuccessful experiment of<br>running <code>YARN</code> on top of <code>HDFS</code>, the <em>ResourceManager</em> of <code>YARN</code> could max out the CPU of RPi by spawning many (&gt;10) MapReduce containers to run the tasks in parallel, which I think<br>could potentially increase the performance. However, containers using too much RAM will get killed by the system. I need to find the sweet spot of balance of parameter setting but I didn’t succeed.</p>
<h1 id="Re-run-tasks-after-optimization"><a href="#Re-run-tasks-after-optimization" class="headerlink" title="Re-run tasks after optimization"></a>Re-run tasks after optimization</h1><p>Tweaked the blocksize to 35mb, I run the same <code>project.xml</code> again with result:</p>
<pre><code>real    6m35.833s
user    7m33.343s
sys     0m13.560s
</code></pre><p>Still, not a big improvement. Search online, I found that we could over-clock the speed of I/O in RPi by modifying the <code>/boot/config.txt</code></p>
<pre><code>sudo bash -c &apos;printf &quot;dtoverlay=sdhost,overclock_50=100\n&quot; 
&gt;&gt; /boot/config.txt&apos;
</code></pre><p>Default is 50MHz and I increased to 100. Another run of hadoop:</p>
<pre><code>real    4m52.303s
user    5m23.183s
sys     0m14.560s
</code></pre><p>Another 20%! I can still push the RPi a little more by overclocking the CPU and RAM speed but I think the increase in performance is limited.</p>
<h1 id="Final-thoughts"><a href="#Final-thoughts" class="headerlink" title="Final thoughts"></a>Final thoughts</h1><p>By moving from disk writing to scheduling of container task which could potentially max out the system resource, the new 2.x Hadoop with <code>YARN</code> architecture is one step to more <code>SPARK</code> like and I think is a elegant solution to the proliferation of Hadoop eco-system.<br>I tried to configure the <code>YARN</code> parameter correctly but after 2 days of works I still get the <code>out of memory</code> interruption in the middle of task. The reason for that is I still haven’t figured out the multiple relations of different settings. (eg: the minimum size allocated for each container should be larger than adequate but can’t exceed the memory size limit of system)</p>
<p>In conclusion, I learnt a lot from this project. I have a much better understanding of the distributed nature of Hadoop, Linux system and command line environment. Also, presenting my cluster and running demo to the classmates is a fun experience.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Why-build-this-cluster&quot;&gt;&lt;a href=&quot;#Why-build-this-cluster&quot; class=&quot;headerlink&quot; title=&quot;Why build this cluster?&quot;&gt;&lt;/a&gt;Why build this clus
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Reservoir Sampling</title>
    <link href="http://yoursite.com/2017/01/08/ReservoirSampling/"/>
    <id>http://yoursite.com/2017/01/08/ReservoirSampling/</id>
    <published>2017-01-08T20:29:46.000Z</published>
    <updated>2017-01-09T03:49:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>For the <a href="https://leetcode.com/problems/linked-list-random-node/" target="_blank" rel="external">follow-up question</a>, if the linked list is very long, we can’t put them into a array-based list and used a random index to get the result-there is not enough space doing that. Then, the only way of solving the problem is to get the result while iterating the linked list.</p>
<p><strong>We must get the random number as we iterate</strong></p>
<ol>
<li>For list of size 1, we just return that incoming node value;</li>
<li>For list of size 2, we first <strong>keep</strong> the first one, when the second one comes, we return one of them with P = 1 / 2; </li>
<li>How about size 3? We do the first two step the same as above, when the 3rd element comes, we return it as the result with P = 1 / 3. Remember that the 1st and 2nd element is chosen with P = 1 <em> 1 / 2 for the first two iteration, with 3rd one coming with P = 1 / 3 to be chosen as final result, the first two elements now have P = 1 / 2 </em> 2 / 3 = 1 / 3 chance to be chosen as the result;</li>
<li>For size of n, we apply the same procedure, choose the nth element with P = 1 / n, thus every other element has P = 1 / (n - 1) * (n - 1) / n = 1 / n;</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;For the &lt;a href=&quot;https://leetcode.com/problems/linked-list-random-node/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;follow-up question&lt;/a&gt;, if the li
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Binary Search related topics</title>
    <link href="http://yoursite.com/2016/12/02/binary-search-and-variant/"/>
    <id>http://yoursite.com/2016/12/02/binary-search-and-variant/</id>
    <published>2016-12-02T17:30:52.000Z</published>
    <updated>2017-01-24T17:48:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lower-upper-bound"><a href="#lower-upper-bound" class="headerlink" title="lower/upper bound"></a>lower/upper bound</h2><p>定义 lower bound 为在给定升序数组中大于等于目标值的最小索引，upper bound 则为小于等于目标值的最大索引.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* nums[index] &gt;= target, min(index)</div><div class="line">* in another word: return the smallest index of nums[index] that &gt;= target</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lowerBound</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> lb = -<span class="number">1</span>, ub = nums.length;</div><div class="line">    <span class="keyword">while</span> (lb + <span class="number">1</span> &lt; ub) &#123;</div><div class="line">        <span class="keyword">int</span> mid = lb + (ub - lb) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</div><div class="line">            lb = mid;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ub = mid;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> lb + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">* nums[index] &lt;= target, max(index)</div><div class="line">* in another word: return the largest index that nums[index] &lt;= target</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">upperBound</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> lb = -<span class="number">1</span>, ub = nums.length;</div><div class="line">    <span class="keyword">while</span> (lb + <span class="number">1</span> &lt; ub) &#123;</div><div class="line">        <span class="keyword">int</span> mid = lb + (ub - lb) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</div><div class="line">            ub = mid;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            lb = mid;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ub - <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="first-last-occurrences"><a href="#first-last-occurrences" class="headerlink" title="first/last occurrences"></a>first/last occurrences</h2><p>Last occurrence:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> nums: An integer array sorted in ascending order</div><div class="line">     * <span class="doctag">@param</span> target: An integer</div><div class="line">     * <span class="doctag">@return</span> an integer</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastPosition</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="comment">// Write your code here</span></div><div class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end = nums.length -<span class="number">1</span>;</div><div class="line">         <span class="comment">//[1,2,2,4,5,5] 2</span></div><div class="line">        <span class="keyword">while</span>(start + <span class="number">1</span> &lt; end)&#123; <span class="comment">// exit when start + 1 &gt;= end thus when start == end - 1</span></div><div class="line">            <span class="keyword">int</span> mid = (start+end)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</div><div class="line">                start = mid;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</div><div class="line">                end = mid;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                start = mid;<span class="comment">//这里不用return mid;而是采取赋值缩小范围</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(nums[end] == target)&#123;</div><div class="line">            <span class="keyword">return</span> end;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(nums[start] == target)&#123;</div><div class="line">            <span class="keyword">return</span> start;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>First occurrence:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> nums: The integer array.</div><div class="line">     * <span class="doctag">@param</span> target: Target to find.</div><div class="line">     * <span class="doctag">@return</span>: The first position of target. Position starts from 0.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearchForFirstOccurrence</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="comment">//write your code here</span></div><div class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length ==<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = nums.length -<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(start+<span class="number">1</span>&lt;end)&#123;</div><div class="line">            <span class="keyword">int</span> mid = (start+end)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</div><div class="line">                start = mid;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</div><div class="line">                end = mid;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                end = mid;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(nums[start] == target)&#123;</div><div class="line">            <span class="keyword">return</span> start;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(nums[end] == target)&#123;</div><div class="line">            <span class="keyword">return</span> end;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;lower-upper-bound&quot;&gt;&lt;a href=&quot;#lower-upper-bound&quot; class=&quot;headerlink&quot; title=&quot;lower/upper bound&quot;&gt;&lt;/a&gt;lower/upper bound&lt;/h2&gt;&lt;p&gt;定义 lower b
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>31. Next Permutation</title>
    <link href="http://yoursite.com/2016/12/02/31-next-permutation/"/>
    <id>http://yoursite.com/2016/12/02/31-next-permutation/</id>
    <published>2016-12-02T16:15:00.000Z</published>
    <updated>2016-12-11T21:21:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/next-permutation/" target="_blank" rel="external">https://leetcode.com/problems/next-permutation/</a></p>
<p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>
<p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order). The replacement must be in-place, do not allocate extra memory. Here are some examples. </p>
<p>Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.<br><code>1,2,3</code> → <code>1,3,2</code><br><br><code>3,2,1</code> → <code>1,2,3</code><br><br><code>1,1,5</code> → <code>1,5,1</code><br></p>
<hr>
<h2 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h2><p> The question asks the <em>lexicographically next greater permutation</em>, which down to find the <em>next smallest</em> number of the previous one.   </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/next-permutation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/next-permutation/&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Longest Substring Without Repeating Characters</title>
    <link href="http://yoursite.com/2016/11/30/longest-substring-without-repeating-characters/"/>
    <id>http://yoursite.com/2016/11/30/longest-substring-without-repeating-characters/</id>
    <published>2016-11-30T20:04:29.000Z</published>
    <updated>2016-12-11T21:21:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="external">https://leetcode.com/problems/longest-substring-without-repeating-characters/</a></p>
<p><div class="question-content"><br>              <p></p><p>Given a string, find the length of the <b>longest substring</b> without repeating characters.</p></div></p>
<p><b>Examples:</b></p>

<p>Given <code>“abcabcbb”</code>, the answer is <code>“abc”</code>, which the length is 3.</p>

<p>Given <code>“bbbbb”</code>, the answer is <code>“b”</code>, with the length of 1.</p>

<p>Given <code>“pwwkew”</code>, the answer is <code>“wke”</code>, with the length of 3. Note that the answer must be a <b>substring</b>, <code>“pwke”</code> is a <i>subsequence</i> and not a substring.</p><p></p>

<hr>
<p>Setting the <strong>Test Case</strong> before writing code is very important!</p>
<p>For problems which ask for a substring, we need to think about <strong>Two Pointers</strong>.</p>
<h2 id="1-Version-1"><a href="#1-Version-1" class="headerlink" title="1. Version 1"></a>1. Version 1</h2><p>I used a Map<character, integer=""> to map each character to its position. When iterate through the characters of String s, if find a repeating<br>character, clear the map and start the iteration from the position of the last seen character. The complexity will be <code>O(n!)</code> worst case.</character,></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> longestLength = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> currentLength = <span class="number">0</span>;</div><div class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</div><div class="line">            <span class="keyword">if</span> (map.containsKey(s.charAt(i))) &#123;</div><div class="line">                <span class="keyword">if</span> (longestLength &lt; currentLength) &#123;</div><div class="line">                    longestLength = currentLength;</div><div class="line">                &#125;</div><div class="line">                currentLength = <span class="number">0</span>;</div><div class="line">                i = map.get(s.charAt(i));</div><div class="line">                map.clear();</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125; </div><div class="line">            map.put(s.charAt(i), i);</div><div class="line">            currentLength++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> longestLength &gt; currentLength ?</div><div class="line">                longestLength : currentLength;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-Two-Pointers"><a href="#2-Two-Pointers" class="headerlink" title="2. Two Pointers"></a>2. Two Pointers</h2><p>Use two pointers: <code>start</code> indicating the start position of the substring currently working on.<br>And <code>i</code> to scan the characters of the string s. Whenever s.charAt(i) is in the map, set the start pointer to the max of start and the<br>position of s.charAt(i). The reason to use <code>max</code> is to make sure <code>start</code> going forward.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> longestLength = <span class="number">0</span>;</div><div class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, start = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</div><div class="line">            <span class="keyword">if</span> (map.containsKey(s.charAt(i))) &#123;</div><div class="line">                start = Math.max(start, map.get(s.charAt(i)) + <span class="number">1</span>);</div><div class="line">            &#125; </div><div class="line">            map.put(s.charAt(i), i);</div><div class="line">            longestLength = Math.max(i - start + <span class="number">1</span>, longestLength);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> longestLength;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-substring-without-repeating-characters/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.c
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kth Largest Element in an Array</title>
    <link href="http://yoursite.com/2016/09/06/kth-largest-element-in-an-array/"/>
    <id>http://yoursite.com/2016/09/06/kth-largest-element-in-an-array/</id>
    <published>2016-09-06T19:48:13.000Z</published>
    <updated>2016-12-17T04:22:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/kth-largest-element-in-an-array/" target="_blank" rel="external">https://leetcode.com/problems/kth-largest-element-in-an-array/</a></p>
<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Find the <strong>k</strong>th largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p>
<p>For example,<br>Given <code>[3,2,1,5,6,4]</code> and k = 2, return 5.</p>
<p><strong>Note:</strong><br>You may assume k is always valid, 1 ≤ k ≤ array’s length.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The naive way of doing this is to sort the array <code>nums</code> and then return nums[nums.length - k].<code>O(NlogN)</code></p>
<p>Further, we can do better by using a Priority Queue, which has complexity of <code>O(NlogK)</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;(k + <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</div><div class="line">            pq.offer(num);</div><div class="line">            <span class="keyword">if</span> (pq.size() &gt; k) &#123;</div><div class="line">                pq.poll();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> pq.peek();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Better, use <a href="https://en.wikipedia.org/wiki/Quickselect" target="_blank" rel="external">quick select</a>. The basic idea is like quick sort to partition the array by a pivot. Compare the index of pivot with k to decide which part to go.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> quickselect(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>, nums.length - k); <span class="comment">// kth larget = length - k + 1 smallest</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">quickselect</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> l = left;</div><div class="line">        <span class="keyword">int</span> r = right;</div><div class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[l] &gt; nums[right]) &#123;</div><div class="line">                r--;</div><div class="line">                swap(nums, l, r);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                l++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        swap(nums, l, right);</div><div class="line">        <span class="keyword">if</span> (l == target) &#123;</div><div class="line">            <span class="keyword">return</span> nums[l];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l &lt; target) &#123;</div><div class="line">            <span class="keyword">return</span> quickselect(nums, l + <span class="number">1</span>, right, target);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> quickselect(nums, left, l - <span class="number">1</span>, target);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> tmp = nums[i];</div><div class="line">        nums[i] = nums[j];</div><div class="line">        nums[j] = tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/kth-largest-element-in-an-array/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/kth
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Discovery</title>
    <link href="http://yoursite.com/2016/09/06/note-about-java/"/>
    <id>http://yoursite.com/2016/09/06/note-about-java/</id>
    <published>2016-09-06T17:00:14.000Z</published>
    <updated>2016-12-11T21:21:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Whenever I find something interesting, I write it here.</p>
<h2 id="Size-of-boolean-in-Java"><a href="#Size-of-boolean-in-Java" class="headerlink" title="Size of boolean in Java"></a>Size of <code>boolean</code> in Java</h2><p>I always assume the <code>boolean</code> data type takes only <em>1 bit</em> of space in memory, but I’m wrong when I search it on Google. A similar question from <a href="http://stackoverflow.com/questions/383551/what-is-the-size-of-a-boolean-variable-in-java" target="_blank" rel="external">StackOverflow</a> says:</p>
<blockquote>
<p>It’s virtual machine dependent.</p>
</blockquote>
<p>And it seems that in Sum’s JVM, it uses <strong>1 byte</strong> for boolean array and it may uses no less than 1 byte for individual boolean. The reason for that must be the trade off for speed since the memory addressing is “usually” 1 byte long.</p>
<p>Also, worth noting from <a href="http://cs-fundamentals.com/tech-interview/java/how-to-find-size-of-a-datatype-in-java.php" target="_blank" rel="external">this link</a> that all primitive wrapper classes except Boolean have a BYTES constant, which gives data type’s size in bytes:</p>
<pre><code>Size of byte: 1 bytes.
Size of short: 2 bytes.
Size of int: 4 bytes.
Size of long: 8 bytes.
Size of char: 2 bytes.
Size of float: 4 bytes.
Size of double: 8 bytes.
</code></pre><p>When you really in a space constrain environment, the <code>java.util.BitSet</code> is the way to go since it use 1 bit for each flag but may be slower. More details <a href="http://chrononsystems.com/blog/hidden-evils-of-javas-byte-array-byte" target="_blank" rel="external">here</a>.</p>
<h2 id="The-i-amp-i"><a href="#The-i-amp-i" class="headerlink" title="The i &amp; (-i)"></a>The <code>i &amp; (-i)</code></h2><p>Assume a number n, we can write the binary representation of <code>n</code> as <code>A1B</code>, A is the number before the least significant <code>1</code> and <code>B</code> as the zeros after that. For example: number 6 is <code>110</code> write as A1B where <code>A = 1 (the most left one, with all the zeros not shown)</code> and <code>B = 0 (most right)</code>. </p>
<p>For <code>-n</code>, if we want to represent it use <code>A1B</code> notation, then:<code>-n</code> = flip the bits of <code>A1B + 1</code> = <code>~A0~B</code> where <code>~B</code> consist of all ones, for example: for number -6, flip of <code>A</code> = 111…10, <code>B</code> = 1. When we do <code>+ 1</code>, the bits in <code>~B</code> flip back to 0 and flips the  middle  bit to 1 again:</p>
<pre><code>-num = (a1b)¯ + 1 = a¯0b¯ + 1 = a¯0(0…0)¯ + 1 = a¯0(1…1) + 1 = a¯1(0…0) = a¯1b.
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Whenever I find something interesting, I write it here.&lt;/p&gt;
&lt;h2 id=&quot;Size-of-boolean-in-Java&quot;&gt;&lt;a href=&quot;#Size-of-boolean-in-Java&quot; class=&quot;he
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>House Robber III</title>
    <link href="http://yoursite.com/2016/09/06/house-robber-iii/"/>
    <id>http://yoursite.com/2016/09/06/house-robber-iii/</id>
    <published>2016-09-06T16:35:02.000Z</published>
    <updated>2016-12-11T21:21:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/house-robber-iii/" target="_blank" rel="external">https://leetcode.com/problems/house-robber-iii/</a></p>
<p>The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the “root.” Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that “all houses in this place forms a binary tree”. It will automatically contact the police if two directly-linked houses were broken into on the same night.</p>
<p>Determine the maximum amount of money the thief can rob tonight without alerting the police.</p>
<p><strong>Example 1:</strong>  </p>
<pre><code>  3
 / \
2   3
 \   \
  3   1
</code></pre><p>Maximum amount of money the thief can rob = 3 + 3 + 1 = <strong>7</strong>.</p>
<p><strong>Example 2:</strong>  </p>
<pre><code>    3
   / \ 
  4   5
 / \   \
1   3   1
</code></pre><p>Maximum amount of money the thief can rob = 4 + 5 = <strong>9</strong>.</p>
<h2 id="Recursive-function"><a href="#Recursive-function" class="headerlink" title="Recursive function"></a>Recursive function</h2><p>If we rob a <code>node</code>, then all its children can’t be robbed due to alarm but the children of its children are available to rob.</p>
<p>If we define <code>rob(node)</code> as the max amount of money the thief can get if he robs this tree and <code>node</code> is the root of the tree, then</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(Node root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) &#123;</div><div class="line">        max += rob(root.left.left) + rob(root.left.right);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) &#123;</div><div class="line">        max += rob(root.right.left) + rob(root.right.right);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> Math.max(max + root.val, rob(root.left) + rob(root.right));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h2><p>The above function works. However, there’s overlaps among the functions calls since this is a <code>DFS</code> kind of recursive calls. I can use a cache to store the value to avoid re-computation.</p>
<p>Use a <code>Map</code> to cache the result of <code>node</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Map&lt;TreeNode, Integer&gt; cache = <span class="keyword">null</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (cache == <span class="keyword">null</span>) &#123;</div><div class="line">            cache = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">            cache.put(<span class="keyword">null</span>, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (cache.containsKey(root)) &#123;</div><div class="line">            <span class="keyword">return</span> cache.get(root);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) &#123;</div><div class="line">            max += rob(root.left.left) + rob(root.left.right);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) &#123;</div><div class="line">            max += rob(root.right.left) + rob(root.right.right);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> rst = Math.max(max + root.val, rob(root.left) + rob(root.right));</div><div class="line">        cache.put(root, rst);</div><div class="line">        <span class="keyword">return</span> rst;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Alternative-solution"><a href="#Alternative-solution" class="headerlink" title="Alternative solution"></a>Alternative solution</h2><p>For a <code>TreeNode root</code>, only 2 possible way to do with it: either rob this root or not.<br>We can use a <code>int[2]</code> to represent the two scenarios. <code>[0]</code> means the max amount of money we get <strong>not</strong> to rob the node, <code>[1]</code> means the max money we get if we rob.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Math.max(robArr(root)[<span class="number">0</span>], robArr(root)[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] robArr(TreeNode root) &#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span>[] left = robArr(root.left);</div><div class="line">        <span class="keyword">int</span>[] right = robArr(root.right);</div><div class="line">        <span class="keyword">int</span> notRob = Math.max(left[<span class="number">0</span>], left[<span class="number">1</span>]) + Math.max(right[<span class="number">0</span>], right[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">int</span> rob = root.val + left[<span class="number">0</span>] + right[<span class="number">0</span>];</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;notRob, rob&#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/house-robber-iii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/house-robber-iii/&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Maximum Product of Word Lengths</title>
    <link href="http://yoursite.com/2016/09/01/maximum-product-of-word-lengths/"/>
    <id>http://yoursite.com/2016/09/01/maximum-product-of-word-lengths/</id>
    <published>2016-09-01T15:14:20.000Z</published>
    <updated>2016-12-11T21:21:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/maximum-product-of-word-lengths/" target="_blank" rel="external">https://leetcode.com/problems/maximum-product-of-word-lengths/</a></p>
<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given a string array <code>words</code>, find the maximum value of <code>length(word[i]) * length(word[j])</code> where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.</p>
<p><strong>Example 1:</strong>  </p>
<p>Given <code>[&quot;abcw&quot;, &quot;baz&quot;, &quot;foo&quot;, &quot;bar&quot;, &quot;xtfn&quot;, &quot;abcdef&quot;]</code><br>Return <code>16</code><br>The two words can be <code>&quot;abcw&quot;, &quot;xtfn&quot;</code>.</p>
<p><strong>Example 2:</strong>  </p>
<p>Given <code>[&quot;a&quot;, &quot;ab&quot;, &quot;abc&quot;, &quot;d&quot;, &quot;cd&quot;, &quot;bcd&quot;, &quot;abcd&quot;]</code><br>Return <code>4</code><br>The two words can be <code>&quot;ab&quot;, &quot;cd&quot;</code>.</p>
<p><strong>Example 3:</strong>  </p>
<p>Given <code>[&quot;a&quot;, &quot;aa&quot;, &quot;aaa&quot;, &quot;aaaa&quot;]</code><br>Return <code>0</code><br>No such pair of words.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><code>int</code> in Java has 32 bits and we only have lower case letters which are 26 in total. We can use the position of the bits in the <code>int</code> as index for the character, eg: index 0 is character ‘a’, 1 is ‘b’ … 25 is ‘z’ and use the value of in that position to flag weather the word has that character. So, the <code>int</code> we are using is essentially an <code>boolean[]</code> of size 26 but the <code>boolean[size]</code> will cost size * 1 byte of space since the size of boolean is 1 byte in Java.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(String[] words)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] chars = <span class="keyword">new</span> <span class="keyword">int</span>[words.length];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; words.length; l++) &#123;</div><div class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words[l].length(); i++) &#123;</div><div class="line">                j |= <span class="number">1</span> &lt;&lt; (words[l].charAt(i) - <span class="string">'a'</span>);</div><div class="line">            &#125;</div><div class="line">            chars[l] = j;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.length - <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; words.length; j++) &#123;</div><div class="line">                <span class="keyword">if</span> ((chars[i] &amp; chars[j]) == <span class="number">0</span>) &#123;</div><div class="line">                    max = Math.max(max, words[i].length() * words[j].length());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Follow-up-what-if-we-use-upper-and-lower-case-of-letters"><a href="#Follow-up-what-if-we-use-upper-and-lower-case-of-letters" class="headerlink" title="Follow up: what if we use upper and lower case of letters?"></a>Follow up: what if we use upper and lower case of letters?</h2><p>Use a <code>boolean[]</code> to store the information we need but it’s hard to do bitwise operation and takes a lot of space.</p>
<p>We can use <code>BitSet</code> from <code>java.util</code>, it provides all the bitwise operation and boolean size is 1 bit.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-product-of-word-lengths/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/max
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/09/01/README/"/>
    <id>http://yoursite.com/2016/09/01/README/</id>
    <published>2016-09-01T14:04:16.000Z</published>
    <updated>2016-09-01T14:04:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dongyan’s-Algorithm-Book"><a href="#Dongyan’s-Algorithm-Book" class="headerlink" title="Dongyan’s Algorithm Book"></a>Dongyan’s Algorithm Book</h1><p>My notes for reference of LeetCode problems</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Dongyan’s-Algorithm-Book&quot;&gt;&lt;a href=&quot;#Dongyan’s-Algorithm-Book&quot; class=&quot;headerlink&quot; title=&quot;Dongyan’s Algorithm Book&quot;&gt;&lt;/a&gt;Dongyan’s Algo
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>306.Additive Number</title>
    <link href="http://yoursite.com/2016/08/30/additive-number/"/>
    <id>http://yoursite.com/2016/08/30/additive-number/</id>
    <published>2016-08-30T14:59:43.000Z</published>
    <updated>2016-12-11T21:21:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/additive-number/" target="_blank" rel="external">https://leetcode.com/problems/additive-number/</a></p>
<p>If we have first number and second one, the rest of numbers are <strong>determined</strong>.</p>
<p>So we just select first and second number as many as possible and examine if the rest of the number is<br>the ones we want. Noted that the total length of the first and second number should be no more than the<br>rest of the numbers because addition only increase the length of the number. To prevent overflow from<br>large integer, we can use <code>BigInteger</code> since it supports arbitrary-precision integers.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.math.BigInteger;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAdditiveNumber</span><span class="params">(String num)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = num.length();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; i++) &#123;</div><div class="line">            <span class="comment">// i stops before midpoint because the length of result that i plus something &gt;= 0 need</span></div><div class="line">            <span class="comment">// to be &gt;= i.</span></div><div class="line">            <span class="keyword">if</span> (num.charAt(<span class="number">0</span>) == <span class="string">'0'</span> &amp;&amp; i &gt; <span class="number">1</span>) &#123;</div><div class="line">                <span class="comment">// number with leading 0 is not valid, but 0 alone is a valid number</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            BigInteger i1 = <span class="keyword">new</span> BigInteger(num.substring(<span class="number">0</span>, i));</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; Math.max(i, j) &lt;= n - i - j; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (num.charAt(i) == <span class="string">'0'</span> &amp;&amp; j &gt; <span class="number">1</span>) &#123;</div><div class="line">                    <span class="comment">// 0 alone is valid number but number with leading 0 is not valid, check next</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                BigInteger i2 = <span class="keyword">new</span> BigInteger(num.substring(i, i + j));</div><div class="line">                <span class="keyword">if</span> (isValid(i1, i2, num, i + j)) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(BigInteger i1, BigInteger i2, String num, <span class="keyword">int</span> start)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (start == num.length()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        i2 = i2.add(i1); <span class="comment">// target number</span></div><div class="line">        i1 = i2.subtract(i1);</div><div class="line">        String target = i2.toString();</div><div class="line">        <span class="keyword">if</span> (num.startsWith(target, start)) &#123;</div><div class="line">            <span class="keyword">return</span> isValid(i1, i2, num, start + target.length());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/additive-number/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/additive-number/&lt;/a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Perfect Squares</title>
    <link href="http://yoursite.com/2016/08/29/perfect-squares/"/>
    <id>http://yoursite.com/2016/08/29/perfect-squares/</id>
    <published>2016-08-29T17:44:04.000Z</published>
    <updated>2016-12-11T21:21:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/perfect-squares/" target="_blank" rel="external">https://leetcode.com/problems/perfect-squares/</a></p>
<h2 id="Divide-and-conquer"><a href="#Divide-and-conquer" class="headerlink" title="Divide and conquer"></a>Divide and conquer</h2><p>For <code>f(n)</code> stands for the least number of perfect square numbers, then:</p>
<pre><code>f(n) = min (f(n - 1^2) + 1, f(n - 2^2) + 1, f(n - 3^2) + 1, ..., f(n - k^2) + 1)
</code></pre><p>where n - k^2 &gt;= 0, f(0) = 0.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> rst = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">while</span> ((n - i * i) &gt;= <span class="number">0</span>) &#123;</div><div class="line">            rst = Math.min(rst, numSquares(n - i * i) + <span class="number">1</span>);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> rst;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The function grows <strong>factorial</strong> which could be improved by using <em>dynamic programming</em>.</p>
<h2 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h2><p>The intermediate result can be cached and later reused by future calls.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</div><div class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            dp[i] = Integer.MAX_VALUE;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; i - j * j &gt;= <span class="number">0</span>; j++) &#123;</div><div class="line">                dp[i] = Math.min(dp[i - j * j] + <span class="number">1</span>, dp[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[n];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/perfect-squares/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/perfect-squares/&lt;/a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Binary Tree Preorder Traversal</title>
    <link href="http://yoursite.com/2016/08/23/binary-tree-preorder-traversal/"/>
    <id>http://yoursite.com/2016/08/23/binary-tree-preorder-traversal/</id>
    <published>2016-08-23T19:33:53.000Z</published>
    <updated>2016-12-11T21:21:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/" target="_blank" rel="external">https://leetcode.com/problems/binary-tree-preorder-traversal/</a></p>
<h2 id="Recursive"><a href="#Recursive" class="headerlink" title="Recursive"></a>Recursive</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">	List&lt;Integer&gt; lst = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">	pre(root, lst);</div><div class="line">	<span class="keyword">return</span> lst;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pre</span><span class="params">(TreeNode node, List&lt;Integer&gt; lst)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	lst.add(node.val);</div><div class="line">	pre(node.left, lst);</div><div class="line">	pre(node.right, lst);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Iterative-solution"><a href="#Iterative-solution" class="headerlink" title="Iterative solution"></a>Iterative solution</h2><p>Pre-order, in-order, or post-order are all depth-first search (DFS). So, using a stack is clearly the way to go.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">	List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">	<span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">return</span> list;</div><div class="line">	&#125;</div><div class="line">	Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">	stack.push(root);</div><div class="line">	<span class="keyword">while</span> (!stack.isEmpty()) &#123;</div><div class="line">		TreeNode tn = stack.pop();</div><div class="line">		list.add(tn.val);</div><div class="line">		<span class="keyword">if</span> (tn.right != <span class="keyword">null</span>) &#123;</div><div class="line">			stack.push(tn.right);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (tn.left != <span class="keyword">null</span>) &#123;</div><div class="line">			stack.push(tn.left);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> list;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Cool-solution-Divide-amp-Conquer"><a href="#Cool-solution-Divide-amp-Conquer" class="headerlink" title="Cool solution (Divide &amp; Conquer)"></a>Cool solution (Divide &amp; Conquer)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">	List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">	<span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">return</span> list;</div><div class="line">	&#125;</div><div class="line">	List&lt;Integer&gt; left = preorderTraversal(root.left);</div><div class="line">	List&lt;Integer&gt; right = preorderTraversal(root.right);</div><div class="line">	list.add(root.val);</div><div class="line">	list.addAll(left);</div><div class="line">	list.addAll(right);</div><div class="line">	<span class="keyword">return</span> list;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-tree-preorder-traversal/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/bina
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Count Complete Tree Nodes</title>
    <link href="http://yoursite.com/2016/08/22/count-complete-tree-nodes/"/>
    <id>http://yoursite.com/2016/08/22/count-complete-tree-nodes/</id>
    <published>2016-08-22T16:04:21.000Z</published>
    <updated>2016-12-11T21:21:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/count-complete-tree-nodes/" target="_blank" rel="external">https://leetcode.com/problems/count-complete-tree-nodes/</a></p>
<h2 id="Brutal-force"><a href="#Brutal-force" class="headerlink" title="Brutal force"></a>Brutal force</h2><p>If we ignore the fact that the tree is complete, then we just count compute the number of nodes naively:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countNodes</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span> + countNodes(root.left) + countNodes(root.right);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The complexity is <code>O(n)</code> n is the number of nodes in the tree.</p>
<h2 id="Better-one"><a href="#Better-one" class="headerlink" title="Better one"></a>Better one</h2><p>Since we know the tree is a complete binary tree, only the leaf nodes are not full. Hence, the number of nodes of every level of the tree except the last one is <code>2^d</code>, d is the depth of the node.</p>
<p>Based on the brutal force method, we could add some code to return the result immediately if the tree with <code>root</code> is a full binary tree:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countNodes</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> h = <span class="number">0</span>;</div><div class="line">        TreeNode left = root, right = root;</div><div class="line">        <span class="keyword">while</span> (right != <span class="keyword">null</span>) &#123;</div><div class="line">            left = left.left;</div><div class="line">            right = right.right;</div><div class="line">            h++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (left == <span class="keyword">null</span>) &#123; <span class="comment">// is a full binary tree, number of node is 2^(heigth + 1) - 1</span></div><div class="line">            <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; h) - <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span> + countNodes(root.left) + countNodes(root.right);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>At least one of the two recursive calls will return immediately since at least one of them is a full binary tree</strong>. Proof:</p>
<ul>
<li>If left subtree is not full binary tree, the right is full has one less height of left one.</li>
<li>If right subtree is not full binary tree, the left must be.</li>
</ul>
<p>So, since one of the recursive call will return, it is essentially <em>cut in half binary search</em> complexity. And each countNode() has a <code>O(logn)</code> for the depth of the tree. So <code>O((logn)^2)</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/count-complete-tree-nodes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/count-com
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>House Robber</title>
    <link href="http://yoursite.com/2016/08/22/house-robber/"/>
    <id>http://yoursite.com/2016/08/22/house-robber/</id>
    <published>2016-08-22T15:10:44.000Z</published>
    <updated>2016-12-11T21:21:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/house-robber/" target="_blank" rel="external">https://leetcode.com/problems/house-robber/</a></p>
<h2 id="recursive-function"><a href="#recursive-function" class="headerlink" title="recursive function"></a>recursive function</h2><p>Define <code>rob(i, 1)</code> as the max money we can get if we <em>rob</em> the <code>ith</code> house, <code>rob(i, 0)</code> as max money we can get if we don’t rob ith house. Then:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rob(i, <span class="number">1</span>) = rob(i - <span class="number">1</span>, <span class="number">0</span>) + nums[i] <span class="comment">// i-1 th house can't be robbed</span></div><div class="line">rob(i, <span class="number">0</span>) = max(rob(i - <span class="number">1</span>, <span class="number">1</span>), rob(i - <span class="number">1</span>, <span class="number">0</span>)) <span class="comment">// doesn't matter if i-1 th hosue is robbed</span></div></pre></td></tr></table></figure>
<p>Then, based on the idea above:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">1</span>) &#123;</div><div class="line">         reurn <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> Math.max(rob(nums, nums.length - <span class="number">1</span>, <span class="number">1</span>), rob(nums, nums.length - <span class="number">1</span>, <span class="number">0</span>));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> num, <span class="keyword">int</span> rob)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (rob == <span class="number">1</span>) &#123;</div><div class="line">           reuturn nums[<span class="number">0</span>];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (rob == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> Math.max(rob(nums, num - <span class="number">1</span>, <span class="number">0</span>), rob(nums, num - <span class="number">1</span>, <span class="number">1</span>));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> rob(nums, num - <span class="number">1</span>, <span class="number">0</span>) + nums[num];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The complexity of this is <code>O(2^n)</code>, which need be to optimized.<br>We can use dynamic programming to store the intermedia result by use a 2-D array:</p>
<pre><code>int[][] dp = new int[nums.length][2]
</code></pre><p>dp[i][0] is for ith house, the max money we get if we don’t rob, <code>dp[i][i]</code> as the max money we can get if we rob the house i;</p>
<pre><code>dp[i][0] = Math.max(dp[i - 1][1], dp[i - 1][0]);
dp[i][1] = dp[i - 1][0] + nums[i];
</code></pre><h2 id="further-optimize"><a href="#further-optimize" class="headerlink" title="further optimize"></a>further optimize</h2><p>We don’t need a 2-D array to keep all the intermedia result for us, only the <code>prevRob</code> and <code>preNotRob</code> is needed.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/house-robber/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/house-robber/&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>211. Add and Search Word - Data structure design</title>
    <link href="http://yoursite.com/2016/08/18/add-and-search-word-data-structure-design/"/>
    <id>http://yoursite.com/2016/08/18/add-and-search-word-data-structure-design/</id>
    <published>2016-08-18T20:46:01.000Z</published>
    <updated>2016-12-11T21:21:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/add-and-search-word-data-structure-design/" target="_blank" rel="external">https://leetcode.com/problems/add-and-search-word-data-structure-design/</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordDictionary</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> TrieNode root = <span class="keyword">new</span> TrieNode();</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123; </div><div class="line">        <span class="comment">// declared static since don't need to refer any member of parent class</span></div><div class="line">        <span class="keyword">boolean</span> isEndOfWord;</div><div class="line">        TrieNode[] children;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span> </span>&#123;</div><div class="line">            isEndOfWord = <span class="keyword">false</span>;</div><div class="line">            children = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Adds a word into the data structure.</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWord</span><span class="params">(String word)</span> </span>&#123;</div><div class="line">        TrieNode cur = root;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : word.toCharArray()) &#123;</div><div class="line">            <span class="keyword">if</span> (cur.children[c - <span class="string">'a'</span>] == <span class="keyword">null</span>) &#123;</div><div class="line">                cur.children[c - <span class="string">'a'</span>] = <span class="keyword">new</span> TrieNode();</div><div class="line">            &#125;</div><div class="line">            cur = cur.children[c - <span class="string">'a'</span>];</div><div class="line">        &#125;    </div><div class="line">        cur.isEndOfWord = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Returns if the word is in the data structure. A word could</span></div><div class="line">    <span class="comment">// contain the dot character '.' to represent any one letter.</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> search (word, root);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word, TrieNode root)</span> </span>&#123;</div><div class="line">        <span class="comment">// search for word start from cur TrieNode</span></div><div class="line">        TrieNode cur = root;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</div><div class="line">            <span class="keyword">char</span> c = word.charAt(i);</div><div class="line">            <span class="keyword">if</span> (c == <span class="string">'.'</span>) &#123; <span class="comment">// skip current node</span></div><div class="line">                <span class="keyword">for</span> (TrieNode child : cur.children) &#123;</div><div class="line">                    <span class="comment">// try every child of the children of current node</span></div><div class="line">                    <span class="comment">// if any of them is true, then return true</span></div><div class="line">                    <span class="keyword">if</span> (child != <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (search(word.substring(i + <span class="number">1</span>), child)) &#123;</div><div class="line">                            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (cur.children[c - <span class="string">'a'</span>] == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">                cur = cur.children[c - <span class="string">'a'</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cur.isEndOfWord;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Your WordDictionary object will be instantiated and called as such:</span></div><div class="line"><span class="comment">// WordDictionary wordDictionary = new WordDictionary();</span></div><div class="line"><span class="comment">// wordDictionary.addWord("word");</span></div><div class="line"><span class="comment">// wordDictionary.search("pattern");</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/add-and-search-word-data-structure-design/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/pr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Minimum Size Subarray Sum</title>
    <link href="http://yoursite.com/2016/08/18/minimum-size-subarray-sum/"/>
    <id>http://yoursite.com/2016/08/18/minimum-size-subarray-sum/</id>
    <published>2016-08-18T19:34:45.000Z</published>
    <updated>2016-12-11T21:21:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimum-size-subarray-sum/" target="_blank" rel="external">https://leetcode.com/problems/minimum-size-subarray-sum/</a></p>
<h2 id="Brutal-force"><a href="#Brutal-force" class="headerlink" title="Brutal force"></a>Brutal force</h2><p>Use <em>backtracking</em> to try every possible subarray. <code>O(n!)</code> complexity.</p>
<p>Can we do better?</p>
<h2 id="Two-pointer"><a href="#Two-pointer" class="headerlink" title="Two pointer"></a>Two pointer</h2><p>Use a <code>end</code> pointer to indicate the end index for the subarray; initially <code>start</code> is 0, if the sum of subarray is larger than <code>s</code>, gradually increase the <code>start</code> to make the subarray shorter. The <code>end</code> will traverse through the array giving out every possible subarray.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>, sum = <span class="number">0</span>; <span class="comment">// sum is the sum of subarray</span></div><div class="line"><span class="comment">// initialize the size of minimum subarray as max value</span></div><div class="line"><span class="keyword">int</span> min = Integer.MAX_VALUE;</div><div class="line"><span class="keyword">while</span> (end &lt; nums.length) &#123;</div><div class="line">    sum += nums[end];</div><div class="line">    end++;</div><div class="line">    <span class="keyword">while</span> (sum &gt;= s) &#123;</div><div class="line">    <span class="comment">// if sum is larger than s, it's possible to "squeze" space of the subarray, hence, increase the start index</span></div><div class="line">        min = Math.min(min, end - start); <span class="comment">// no doubt there is a min</span></div><div class="line">        sum -= nums[start];</div><div class="line">        start++;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> min == Integer.MAX_VALUE ? <span class="number">0</span> : min; </div><div class="line"><span class="comment">// if min is unchanged, then there's no such subarray such that sum &gt;= s</span></div></pre></td></tr></table></figure>
<h3 id="Thought-about-two-pointers"><a href="#Thought-about-two-pointers" class="headerlink" title="Thought about two pointers"></a>Thought about two pointers</h3><p>Two pointers method is such a beautiful and elegant solution for many questions, however it is hard to come up with.</p>
<p>Basically, max, min subarray problem can be solved by two pointers each points to the start and end subarray.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-size-subarray-sum/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/minimum-s
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Course Schedule</title>
    <link href="http://yoursite.com/2016/08/18/course-schedule/"/>
    <id>http://yoursite.com/2016/08/18/course-schedule/</id>
    <published>2016-08-18T19:16:20.000Z</published>
    <updated>2016-12-11T21:21:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/course-schedule/" target="_blank" rel="external">https://leetcode.com/problems/course-schedule/</a></p>
<p>Whether is possible to finish all the course depends on whether there is a <strong>circle prerequisites</strong> in the course list.<br>Hence, we only need to compute if there is a <strong>topological ordering</strong> of the courses.</p>
<p>Steps of the algorithm (BFS):</p>
<ol>
<li>Find vertices with in-degree of <strong>0</strong>, put them into a <code>queue</code></li>
<li>While queue is not empty, poll the queue, find the vertices which are pointed by the vertices we just polled from the queue</li>
<li>If there is no vertex left in the graph, then there is a valid topological ordering</li>
</ol>
<p>From Wikipedia: a BFS method</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">L ← Empty list that will contain the sorted elements</div><div class="line">S ← Set of all nodes with no incoming edges</div><div class="line">while S is non-empty do</div><div class="line">    remove a node n from S</div><div class="line">    add n to tail of L</div><div class="line">    for each node m with an edge e from n to m do</div><div class="line">        remove edge e from the graph</div><div class="line">        if m has no other incoming edges then</div><div class="line">            insert m into S</div><div class="line">if graph has edges then</div><div class="line">    return error (graph has at least one cycle)</div><div class="line">else </div><div class="line">    return L (a topologically sorted order)</div></pre></td></tr></table></figure>
<p>My code:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] indegrees = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses]; <span class="comment">// how many pre for course[i]</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] pair : prerequisites) &#123;</div><div class="line">            indegrees[pair[<span class="number">0</span>]]++; </div><div class="line">        &#125;</div><div class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; indegrees.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (indegrees[i] == <span class="number">0</span>) &#123;</div><div class="line">                q.offer(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> count = q.size();</div><div class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</div><div class="line">            <span class="keyword">int</span> i = q.poll();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>[] pair : prerequisites) &#123;</div><div class="line">                <span class="keyword">if</span> (pair[<span class="number">1</span>] == i) &#123;</div><div class="line">                    indegrees[pair[<span class="number">0</span>]]--;</div><div class="line">                    <span class="keyword">if</span> (indegrees[pair[<span class="number">0</span>]] == <span class="number">0</span>) &#123; </div><div class="line">                        q.offer(pair[<span class="number">0</span>]);</div><div class="line">                        count++;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count == numCourses;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The running time is <code>O(v^2)</code> since the while loop is <code>O(V)</code> and there is a <code>for loop for O(V)</code> inside.<br>We can improve the speed by building a adjacent list for the neighbor of vertex.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] indegrees = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses]; <span class="comment">// how many pre for course[i]</span></div><div class="line">        List&lt;Integer&gt;[] adj = <span class="keyword">new</span> ArrayList[numCourses];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] pair : prerequisites) &#123;</div><div class="line">            <span class="keyword">int</span> pre = pair[<span class="number">1</span>], cur = pair[<span class="number">0</span>];</div><div class="line">            <span class="keyword">if</span> (adj[pre] == <span class="keyword">null</span>) &#123;</div><div class="line">                adj[pre] = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            &#125;</div><div class="line">            List&lt;Integer&gt; list = adj[pre];</div><div class="line">            list.add(cur);</div><div class="line">            indegrees[cur]++; </div><div class="line">        &#125;</div><div class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; indegrees.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (indegrees[i] == <span class="number">0</span>) &#123;</div><div class="line">                q.offer(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</div><div class="line">            <span class="keyword">int</span> i = q.poll();</div><div class="line">            count++;</div><div class="line">            <span class="keyword">if</span> (adj[i] != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (Integer neibor : adj[i]) &#123;</div><div class="line">                    indegrees[neibor]--;</div><div class="line">                    <span class="keyword">if</span> (indegrees[neibor] == <span class="number">0</span>) &#123;</div><div class="line">                        q.offer(neibor);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count == numCourses;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/course-schedule/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/course-schedule/&lt;/a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Count Prime</title>
    <link href="http://yoursite.com/2016/08/12/count-primes/"/>
    <id>http://yoursite.com/2016/08/12/count-primes/</id>
    <published>2016-08-13T02:18:31.000Z</published>
    <updated>2016-12-11T21:21:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/count-primes/" target="_blank" rel="external">https://leetcode.com/problems/count-primes/</a></p>
<blockquote>
<p>A prime number is a number that is only divisible by 1 and itself</p>
</blockquote>
<h2 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a>Version 1</h2><p>According to the definition of prime number, we can create<br>a function <code>isPrime</code> to test if a number n is a prime number:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Then, we can iterate through all the number between 1 to n for all the<br>prime numbers. <code>O(n^2)</code></p>
<h2 id="Version-2"><a href="#Version-2" class="headerlink" title="Version 2"></a>Version 2</h2><p>Some of the step in the for-loop in the <code>isPrime</code> is not necessary since<br>if <code>n</code> is not a prime number, then there must be <code>n = p x q</code> and <code>p &lt;= q</code>,<br>then p must be less than <code>sqrt(n)</code>. We only need to test for <code>p</code> to get<br>all the information if <code>n</code> is a prime number.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>isPrime(n)</code> is now <code>O(sqrt(n))</code>, total complexity is <code>O(n * sqrt(n))</code></p>
<h2 id="Version-3"><a href="#Version-3" class="headerlink" title="Version 3"></a>Version 3</h2><p>The idea is to build a table <code>boolean[n]</code>, mark<br>all the non-prime numbers from 2 to n and the un-marked is prime numbers.<br>The reason it is faster is that it uses extra space for dynamic programming.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/count-primes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/count-primes/&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
